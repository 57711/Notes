import{_ as k,r as p,o as _,c as v,a as s,d as t,b as n,w as a,e as o}from"./app-7D7ZZLlA.js";const f={},b=o(`<h1 id="广度优先bfs-深度优先dfs" tabindex="-1"><a class="header-anchor" href="#广度优先bfs-深度优先dfs" aria-hidden="true">#</a> 广度优先BFS &amp; 深度优先DFS</h1><h2 id="bfs" tabindex="-1"><a class="header-anchor" href="#bfs" aria-hidden="true">#</a> BFS</h2><p>很大集合中找特定节点，依次把子节点加入队列中来实现。 对于图需要判重的操作。</p><h3 id="代码模版" tabindex="-1"><a class="header-anchor" href="#代码模版" aria-hidden="true">#</a> 代码模版</h3><p>利用queue</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">BFS</span> <span class="token punctuation">(</span><span class="token parameter">graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>
    <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        visited<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>

        <span class="token keyword">const</span> childrenWOVisited <span class="token operator">=</span> <span class="token function">process_children</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>chilren<span class="token punctuation">)</span>
        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childrenWOVisited<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dfs" tabindex="-1"><a class="header-anchor" href="#dfs" aria-hidden="true">#</a> DFS</h2><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><p>利用递归</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token constant">DFS</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> visited</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    visited<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> nextNode <span class="token keyword">of</span> node<span class="token punctuation">.</span>chilren<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nextNode <span class="token keyword">in</span> visited<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token constant">DFS</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> visited<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环写法， 利用stack</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">DFS</span> <span class="token punctuation">(</span><span class="token parameter">graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>
    <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        visited<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token function">process</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>

        <span class="token keyword">const</span> childrenWOVisited <span class="token operator">=</span> <span class="token function">process_children</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>chilren<span class="token punctuation">)</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childrenWOVisited<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2>`,13),g={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},x=s("strong",null,"解1",-1),y={class:"katex"},w={class:"katex-mathml"},N=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),O=s("ol",null,[s("li",null,"记录level，level信息同节点一样加入queue中，或者每个节点带上level 信息"),s("li",null,"每一层单独扫描， batch process, 记录这一层一共需要多少次遍历。BFS的步长为每一层元素的个数。不需要加任何标识，")],-1),M=s("strong",null,"解2",-1),S={class:"katex"},F={class:"katex-mathml"},j=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),B={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},V=s("strong",null,"解1",-1),q={class:"katex"},L={class:"katex-mathml"},W=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),z=s("strong",null,"解2",-1),E={class:"katex"},C={class:"katex-mathml"},I=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),T=s("p",null,[s("strong",null,"解3"),t("：分治，")],-1),A=s("ol",null,[s("li",null,"算最大，算左边和右边， 取最大值加1，为该层的最大，并返回。"),s("li",null,"算最小， 算左边和右边。 如果左边null， 右边直接加1。 如果右边null， 左边直接加1. 如果左右都不为null， 分别算，取最小值并且加1。")],-1),G={href:"https://leetcode.cn/problems/generate-parentheses/",target:"_blank",rel:"noopener noreferrer"},H=s("strong",null,"解1",-1),J={class:"katex"},K={class:"katex-mathml"},P=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span>',1),Q=s("p",null,"剪枝判断",-1),R=s("ol",null,[s("li",null,"局部不合法，不再递归"),s("li",null,"左右括号用尽，不再递归")],-1);function U(X,Y){const d=p("ExternalLinkIcon"),e=p("mi"),l=p("mo"),c=p("mrow"),i=p("annotation"),u=p("semantics"),r=p("math"),m=p("mn"),h=p("msup");return _(),v("div",null,[b,s("ul",null,[s("li",null,[s("a",g,[t("二叉树的层序遍历"),n(d)])])]),s("p",null,[x,t("： BFS，需要记录每一层结束的节点。"),s("span",y,[s("span",w,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(u,null,{default:a(()=>[n(c,null,{default:a(()=>[n(e,null,{default:a(()=>[t("O")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),n(e,null,{default:a(()=>[t("N")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),n(i,{encoding:"application/x-tex"},{default:a(()=>[t("O(N)")]),_:1})]),_:1})]),_:1})]),N])]),O,s("p",null,[M,t("： DFS, 需要记录level 信息， 按level放入对应位置数组中。 "),s("span",S,[s("span",F,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(u,null,{default:a(()=>[n(c,null,{default:a(()=>[n(e,null,{default:a(()=>[t("O")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),n(e,null,{default:a(()=>[t("N")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),n(i,{encoding:"application/x-tex"},{default:a(()=>[t("O(N)")]),_:1})]),_:1})]),_:1})]),j])]),s("ul",null,[s("li",null,[s("a",B,[t("最小深度"),n(d)])]),s("li",null,[s("a",D,[t("最大深度"),n(d)])])]),s("p",null,[V,t("： DFS, "),s("span",q,[s("span",L,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(u,null,{default:a(()=>[n(c,null,{default:a(()=>[n(e,null,{default:a(()=>[t("O")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),n(e,null,{default:a(()=>[t("N")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),n(i,{encoding:"application/x-tex"},{default:a(()=>[t("O(N)")]),_:1})]),_:1})]),_:1})]),W])]),s("p",null,[z,t("： BFS, "),s("span",E,[s("span",C,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(u,null,{default:a(()=>[n(c,null,{default:a(()=>[n(e,null,{default:a(()=>[t("O")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),n(e,null,{default:a(()=>[t("N")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),n(i,{encoding:"application/x-tex"},{default:a(()=>[t("O(N)")]),_:1})]),_:1})]),_:1})]),I])]),T,A,s("ul",null,[s("li",null,[s("a",G,[t("n括号"),n(d)])])]),s("p",null,[H,t("： 递归/深度优先/剪枝 "),s("span",J,[s("span",K,[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(u,null,{default:a(()=>[n(c,null,{default:a(()=>[n(e,null,{default:a(()=>[t("O")]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),n(h,null,{default:a(()=>[n(m,null,{default:a(()=>[t("2")]),_:1}),n(e,null,{default:a(()=>[t("N")]),_:1})]),_:1}),n(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),n(i,{encoding:"application/x-tex"},{default:a(()=>[t("O(2^N)")]),_:1})]),_:1})]),_:1})]),P])]),Q,R])}const $=k(f,[["render",U],["__file","bfs-dfs.html.vue"]]);export{$ as default};

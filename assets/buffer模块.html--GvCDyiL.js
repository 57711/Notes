import{_ as o,r as f,o as a,c as t,a as e,d,b as c,e as n}from"./app-7D7ZZLlA.js";const u={},i=n('<h1 id="buffer-模块" tabindex="-1"><a class="header-anchor" href="#buffer-模块" aria-hidden="true">#</a> Buffer 模块</h1><h2 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> buffer</h2><p>buffer 用来处理二进制或非 unicode 编码的数据。</p><p>buffer 代表一个缓冲区，用于存储二进制数据，俗称字节流，是 i/o 传输时常用的处理方式。相比于字符串，buffer 可以免去编码和解码的过程，节省 cpu 成本，因此在使用 nodejs 进行服务端开发时，http、tcp、udp、io、数据库、处理图片、表文件商户餐等操作，都会用到 buffer。另外 buffer 其实也是 stream 的基础。</p><p><strong>应用：</strong></p><ul><li>在使用 net 或 http 模块接受网络数据时，可用 buffer 作为数据结构进行传输，即 data 事件的参数。</li><li>用于大文件的读取和写入，以前 fs 读取的内容是 string，后来都改用 buffer，在大文件读取上，性能和内存有明显优势。</li><li>用于字符转码、进制转换。</li><li>用作数据结构，处理二进制数据，也可以处理字符编码。</li></ul><h2 id="node中的buffer模块" tabindex="-1"><a class="header-anchor" href="#node中的buffer模块" aria-hidden="true">#</a> node中的buffer模块</h2><p>二进制数据包</p><p>创建 <code>Buffer.from()</code>, <code>Buffer.alloc()</code></p><p><code>Buffer.from(&#39;string&#39;)</code><code>Buffer.from([1,2,3])</code><code>Buffer.alloc(20)</code></p><p>00 为8位 <code>writeInt8</code> 00 00 为16位 <code>writeInt16BE</code> <code>writeInt16LE</code></p><p>BE 大端放高位 / LE 大端放低位</p><h2 id="proto-buffer-二进制协议编码库" tabindex="-1"><a class="header-anchor" href="#proto-buffer-二进制协议编码库" aria-hidden="true">#</a> proto buffer 二进制协议编码库</h2><p><code>protocal-buffers</code> 先写一个 <code>test.proto</code> 结构化数据格式</p><p><code>schema = protobuf(&lt;proto file&gt;)</code></p><p><code>schema.structure.encode({key: value})</code></p><h2 id="_8kb" tabindex="-1"><a class="header-anchor" href="#_8kb" aria-hidden="true">#</a> 8KB</h2>',17),s={href:"/nodejs/#%E5%87%8F%E5%B0%91%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},p=e("p",null,"实例化一个新的 Buffer 类，会根据实例化时的大小去申请内存空间，如果需要的空间小于 8KB，则会多一次判定，判定当前的 8KB 载体剩余容量是否够新的 buffer 实例，如果够用，则将新的 buffer 实例保存在当前的 8KB 载体中，并且更新剩余的空间。",-1);function h(l,b){const r=f("ExternalLinkIcon");return a(),t("div",null,[i,e("p",null,[e("a",s,[d("减少内存使用"),c(r)])]),p])}const B=o(u,[["render",h],["__file","buffer模块.html.vue"]]);export{B as default};

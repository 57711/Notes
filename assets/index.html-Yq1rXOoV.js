import{_ as a,r as e,o as t,c as p,a as o,b as c,w as i,d as l,e as n}from"./app-7D7ZZLlA.js";const u={},r=n(`<h1 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js" aria-hidden="true">#</a> node js</h1><p>全局环境变量</p><p><code>setTimeout, setInterval, setImmdiate, __filename, __dirname</code></p><p><code>process: kill, exit, hrtime, cpuUsage, memoryUsage, env, argv,</code></p><h2 id="process-对象" tabindex="-1"><a class="header-anchor" href="#process-对象" aria-hidden="true">#</a> process 对象</h2><ul><li>统计信息，cpu，内存等。 <ul><li>process.cpuUsage();</li><li>memoryUsage()</li><li>env</li><li>argv</li></ul></li><li>事件循环机制，process.nextTick。 <ul><li>nodejs 为事件循环位置了一个队列，nextTick 入队列，_tickCallback 出队列。</li></ul></li><li>uncaughtException 事件。 <ul><li>全局异常捕获。</li></ul></li><li>其他 <ul><li>进程管理，exit，kill。</li><li>i/o 相关，stdout，stderr，stdin。</li><li>路径处理，cwd，chdir 等。</li><li>执行时间 hrtime</li></ul></li></ul><h2 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc" aria-hidden="true">#</a> RPC</h2><p>RPC vs ajax</p><ul><li>RPC 寻址不使用 DNS</li><li>协议层不使用 HTTP，而是基于 TCP 或 UDP，半双工或双工</li><li>数据包格式使用二进制，不用 JSON</li></ul><h2 id="net-模块" tabindex="-1"><a class="header-anchor" href="#net-模块" aria-hidden="true">#</a> net 模块</h2><p>同 http 服务一样需要服务端和客户端</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">creatServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 写入数据</span>
  socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 监听数据</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    buffer<span class="token punctuation">.</span><span class="token function">readInt16BE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Socket</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">connnect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&#39;4000&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全双工，加包序号标记 粘包， tcp 会把同时发的多个小包合成一个大包一次发送， 需要粘包切分 处理粘包，不完整包需要标记包长 错误处理</p><h2 id="restful-api" tabindex="-1"><a class="header-anchor" href="#restful-api" aria-hidden="true">#</a> restful api</h2><p>简单，根据动词 数据聚合不好， 需要更多数据需要拉很多接口， 需要少的数据会有冗余</p><h2 id="graphql" tabindex="-1"><a class="header-anchor" href="#graphql" aria-hidden="true">#</a> GraphQL</h2><p>专注于数据聚合， 需要什么返回什么，不会冗余。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> buildSchema <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;graphql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> schema <span class="token operator">=</span> <span class="token function">buildSchema</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    type Query {
        hello: String
    }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 对于每个api接口，root 提供了resolver 函数, 取数据的方式</span>
<span class="token keyword">var</span> root <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">graphql</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> <span class="token string">&#39;{ hello }&#39;</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果 <code>{data: {hello: &quot;Hello&quot;}}</code></p><h2 id="前后端同构" tabindex="-1"><a class="header-anchor" href="#前后端同构" aria-hidden="true">#</a> 前后端同构</h2><p>同一个模版/组件 可以在浏览器端渲染， 也可以在 nodejs 端渲染</p><p><code>ReactDomServer.renderToString(component)</code></p><p><code>VueServerRenderer.renderToString()</code></p><p>注重职责的分离：处理数据逻辑，处理环境逻辑的部分需要<strong>代码分割</strong></p><h2 id="压测" tabindex="-1"><a class="header-anchor" href="#压测" aria-hidden="true">#</a> 压测</h2><p>apache bench</p><p><code>-c</code> 并发量，同时请求服务器的请求数量。 <code>-n</code> 总共多少请求。<code>-t</code> 压测时间</p><p><code>ab -c200 -n1600 -t15 url</code></p><p><strong>性能指标</strong></p><ul><li><code>request per second</code>, <code>qps</code>每秒能承载的请求量， 并发量</li><li><code>time per reqest</code>, <code>RT</code>每次请求所需时间</li><li><code>time per reqest concurrent</code>, 多久并发量能得到结果</li><li><code>transfer rate</code>, 吞吐量， 每秒数据的流量， 跟带宽差不多</li></ul><p>qps 和 rt 最重要</p><p>根据性能指标找<strong>性能瓶颈</strong></p><p><strong>linux 命令</strong></p><ul><li><code>top</code> 查看 cpu, 内存</li><li><code>iostat</code> io 设备，硬盘</li></ul><p>js 的运算能力会可能导致 cpu 占用大</p><h2 id="nodejs-性能分析工具" tabindex="-1"><a class="header-anchor" href="#nodejs-性能分析工具" aria-hidden="true">#</a> nodejs 性能分析工具</h2><ul><li><p>profile， 运行 prof 时做 ab 压测</p><p><code>node --prof index.js</code></p><p>分析得到的 log <code>node --prof-process xxx.log &gt; profile.txt</code></p><p>bottom up / heavy 调用栈， 看占用大头的来源</p></li><li><p>Chrome devtool</p><p><code>node --inspect-brk index.js</code></p><p>浏览器访问 <code>chrome://inspect</code>, profile 标签开始 cpu profile， 进行 ab</p></li><li><p>clinic.js</p></li></ul><h2 id="优化的方法" tabindex="-1"><a class="header-anchor" href="#优化的方法" aria-hidden="true">#</a> 优化的方法</h2><p><strong>提前计算</strong>，<strong>将服务阶段代码移动到启动阶段做</strong>。</p><ol><li>减少不必要计算，尽量将中间件中的计算移到程序启动时执行，而不在 http 请求响应过程中做</li><li>空间换时间，把重复的计算缓存，</li></ol><p>例子：</p><ul><li>fs.readFileSync 耗时， 可以不在每次请求都调用， 而是放到全局中。</li><li>byteLengthUtf8 耗时，readFileSync 第二个参数可以不用<code>&#39;utf-8&#39;</code>, 而是返回 buffer 直接给到 body。</li></ul><h2 id="垃圾回收-gc" tabindex="-1"><a class="header-anchor" href="#垃圾回收-gc" aria-hidden="true">#</a> 垃圾回收 GC</h2>`,44),d=n('<p>js 会记录所有创建过的 js 对象，隔一段时间定时清理没有再被使用的对象。</p><p><strong>新生代</strong>，容量小，垃圾回收块。</p><p>Cheney</p><p>所有新创建的都进入新生代，GC 频率高。新生代中经历了几次 GC 都没被清理掉的进入老生代。</p><p><strong>老生代</strong>， 容量大，垃圾回收慢，GC 频率低</p><p><strong>策略：</strong></p><ul><li>减少内存使用</li><li>避免内存泄漏</li></ul><h3 id="减少内存使用" tabindex="-1"><a class="header-anchor" href="#减少内存使用" aria-hidden="true">#</a> 减少内存使用</h3><p>池，减少分配及销毁的消耗，使内存被复用。</p><p>nodejs buffer 是由 nodejs 所定义的，内存分配策略由 nodejs 定义。</p><p>nodejs 对于小于 8kb buffer 的内存策略， 共享创建的 8kb 内存复用，而不是每次都新建 8kb</p><h3 id="检查内存泄漏" tabindex="-1"><a class="header-anchor" href="#检查内存泄漏" aria-hidden="true">#</a> 检查内存泄漏</h3><p>使用 chrome devtool，memory，进行 ab 过程中截取内存快照。</p><p>epipe 报错, ab 的 tcp 已经断开后， 服务器还向这个 tcp 中写数据</p><p>gc roots，没有被其他对象所引用的变量都会挂在 gc roots 上</p><h2 id="编写-c-插件加速运行" tabindex="-1"><a class="header-anchor" href="#编写-c-插件加速运行" aria-hidden="true">#</a> 编写 c++插件加速运行</h2><p>c++ 文件通过 node-gyp 编译为<code>.node</code> 文件</p><p><strong>成本：</strong> c++变量和 v8 变量的转换</p><p><strong>收益：</strong> C++ 运算比 js 快</p><p><strong>成本也可能会大过收益。</strong></p>',20);function k(h,v){const s=e("RouterLink");return t(),p("div",null,[r,o("p",null,[c(s,{to:"/nodejs/js/%E5%86%85%E5%AD%98.html#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6"},{default:i(()=>[l("垃圾回收")]),_:1})]),d])}const g=a(u,[["render",k],["__file","index.html.vue"]]);export{g as default};

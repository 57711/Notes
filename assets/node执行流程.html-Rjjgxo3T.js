import{_ as a,o as e,c as n,e as s}from"./app-7D7ZZLlA.js";const t={},i=s(`<h1 id="node-执行流程" tabindex="-1"><a class="header-anchor" href="#node-执行流程" aria-hidden="true">#</a> node 执行流程</h1><h2 id="_1-platforminit" tabindex="-1"><a class="header-anchor" href="#_1-platforminit" aria-hidden="true">#</a> 1 PlatformInit()</h2><p>用于对文件进行描述，以及注册两个信号处理函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">RegisterSignalHander</span><span class="token punctuation">(</span><span class="token constant">SIGINT</span><span class="token punctuation">,</span> SignalExit<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">RegisterSignalHander</span><span class="token punctuation">(</span><span class="token constant">SIGTERM</span><span class="token punctuation">,</span> SignalExit<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-argv-uv-setup-args-argc-grgv" tabindex="-1"><a class="header-anchor" href="#_2-argv-uv-setup-args-argc-grgv" aria-hidden="true">#</a> 2 argv = uv_setup_args(argc,grgv)</h2><p>uv_setup_args 是定义在 libuv 中的方法，用于进行 process.title 的设置和读取。</p><h2 id="_3-init-argc-const-cast-argv-exec-argc-exec-argv" tabindex="-1"><a class="header-anchor" href="#_3-init-argc-const-cast-argv-exec-argc-exec-argv" aria-hidden="true">#</a> 3 Init(&amp;argc,const_cast(argv),&amp;exec_argc,&amp;exec_argv)</h2><ul><li>初始化 Uptime 值</li><li>对 node 命令行接收的参数和 V8 的 flag 参数进行映射处理。</li><li>将 node_is_initialized 标记为 true。</li></ul><h2 id="_4-v8-initialize" tabindex="-1"><a class="header-anchor" href="#_4-v8-initialize" aria-hidden="true">#</a> 4 V8::Initialize()</h2><p>所有的 nodejs 源码（js 文件）都会先由 V8 引擎来解释并运行。</p><h2 id="_5-start-uv-default-loop-argc-argv-exec-argc-exec-argv" tabindex="-1"><a class="header-anchor" href="#_5-start-uv-default-loop-argc-argv-exec-argc-exec-argv" aria-hidden="true">#</a> 5 Start(uv_default_loop(),argc,argv,exec_argc,exec_argv)</h2><p>主要针对于 libuv 进行操作</p><ul><li>准备工作</li><li>执行 loadEnvironment(&amp;env), 构建 process 对象。</li><li>开启 eventloop，无线循环</li><li>收尾，内存回收，断开 debug 连接。</li></ul>`,13),r=[i];function c(l,o){return e(),n("div",null,r)}const d=a(t,[["render",c],["__file","node执行流程.html.vue"]]);export{d as default};

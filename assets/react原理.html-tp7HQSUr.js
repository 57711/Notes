import{_ as n,o as s,c as a,e}from"./app-7D7ZZLlA.js";const t="/Notes/images/fiberRender.png",p="/Notes/images/reactRootNode.png",o={},c=e(`<h1 id="react-原理" tabindex="-1"><a class="header-anchor" href="#react-原理" aria-hidden="true">#</a> React 原理</h1><h2 id="react-相关概念" tabindex="-1"><a class="header-anchor" href="#react-相关概念" aria-hidden="true">#</a> react 相关概念</h2><h3 id="异步可中断-fiber" tabindex="-1"><a class="header-anchor" href="#异步可中断-fiber" aria-hidden="true">#</a> 异步可中断 / fiber</h3><p>react 没有收集依赖，所以更新只能从头遍历一边，找不同。fiber 用来实现<strong>异步可中断更新</strong></p><ul><li><p>v16 之前就是 stack reconciler，从根节点开始递归，同步，但是慢，调用栈长</p></li><li><p>v16.9 ～ v17.0.2 是 fiber reconciler，遍历时在每个节点做<strong>异步可中断更新</strong>。 v17.0.2 有 fiber 结构，但是默认 legacy 模式 不会中断更新。concurrent 模式可以高优先级打断低优先级执行</p></li><li><p>v18 concurrent 模式</p></li></ul><h3 id="双缓存" tabindex="-1"><a class="header-anchor" href="#双缓存" aria-hidden="true">#</a> 双缓存</h3><p>有 current，和 workInProgress， 在前一帧计算出下一帧要渲染的内容，下一帧再渲染。这种在内存中构建并直接替换的技术叫做双缓存.</p><h3 id="react-中数据结构-vdom-fiber-真实-dom" tabindex="-1"><a class="header-anchor" href="#react-中数据结构-vdom-fiber-真实-dom" aria-hidden="true">#</a> react 中数据结构：vdom/fiber/真实 dom</h3><h4 id="vdom-element" tabindex="-1"><a class="header-anchor" href="#vdom-element" aria-hidden="true">#</a> vdom / element</h4><p>通过 babel <code>@babel/preset-react</code> 解析 jsx，生成<code>createElement, jsx</code>, <code>createElement</code> 执行生成 vdom。</p><p>vdom 是嵌套的结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;app&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fiber-链表形式" tabindex="-1"><a class="header-anchor" href="#fiber-链表形式" aria-hidden="true">#</a> fiber 链表形式</h4><ul><li>fiber 就是数据结构，包含了 dom，链表，effectList 相关属性</li><li>react 中有两个 fiber， current，和 workInProgress，用来实现双缓存</li><li>每次更新用 vdom 和 current fiber 比较生成 wip fiber。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> FiberNode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 静态数据</span>
  tag<span class="token punctuation">,</span> <span class="token comment">// 组件类型</span>
  key<span class="token punctuation">,</span>
  elementType<span class="token punctuation">,</span> <span class="token comment">// 函数组件用memo包裹</span>
  type<span class="token punctuation">,</span> <span class="token comment">// dom 元素类型</span>
  stateNode<span class="token punctuation">,</span> <span class="token comment">// 真实dom</span>
<span class="token comment">// 与其他fiber 关系, 链表</span>
  <span class="token keyword">return</span><span class="token punctuation">,</span> <span class="token comment">// 父级</span>
  child<span class="token punctuation">,</span>
  sibling<span class="token punctuation">,</span> <span class="token comment">// 右边第一个兄弟</span>
  index<span class="token punctuation">,</span>
<span class="token comment">// 动态数据</span>
<span class="token comment">//  状态类</span>
  pendingProps<span class="token punctuation">,</span>
  memoizedProps<span class="token punctuation">,</span>
  updateQueue<span class="token punctuation">,</span>
  memoizedState<span class="token punctuation">,</span>
  dependencies<span class="token punctuation">,</span>
  mode<span class="token punctuation">,</span>
<span class="token comment">//  副作用 Effect</span>
  effectTag<span class="token punctuation">,</span> <span class="token comment">// 搜集副作用 Effect</span>
  nextEffect<span class="token punctuation">,</span>
  firstEffect<span class="token punctuation">,</span>
  lastEffect<span class="token punctuation">,</span>
<span class="token comment">// 调度优先级相关</span>
  lanes<span class="token punctuation">,</span>
  childLanes<span class="token punctuation">,</span>
<span class="token comment">// 更新要对应的fiber</span>
  alternate<span class="token punctuation">,</span> <span class="token comment">// 双缓存</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react-包" tabindex="-1"><a class="header-anchor" href="#react-包" aria-hidden="true">#</a> react 包</h3><ul><li>react 提供 vdom api，提供用户相关 api，（useState）</li><li>react-reconciler <ul><li>beginWork</li><li>completeWork</li><li>commitWork</li></ul></li><li>react-dom dom 相关</li></ul><h2 id="渲染流程" tabindex="-1"><a class="header-anchor" href="#渲染流程" aria-hidden="true">#</a> 渲染流程</h2><p><img src="`+t+`" alt="fiberRender"></p><h3 id="render-开始" tabindex="-1"><a class="header-anchor" href="#render-开始" aria-hidden="true">#</a> render 开始</h3><ol><li><code>render</code>，接收 container，挂载位置的真实 dom</li><li><code>legacyRenderSubtreeIntoContainer</code><ol><li>container._reactRootContainer.</li><li>判断是否有 root， 没有创建，<code>legacyCreateRootFromDomContainer</code>， 最后<code>new FiberRootNode()</code></li><li>最后形成这种结构</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// container._reactRootContainer._internalRoot.current</span>
<span class="token comment">// (挂载的dom)-&gt;     (root)    -&gt; (FiberRoot) -&gt; (RootFiber)</span>

<span class="token keyword">function</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span><span class="token parameter">containerInfo<span class="token punctuation">,</span> tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FiberRootNode</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// root 中 root.containerInfo 就是挂载的dom</span>
  <span class="token comment">// root.containerInfo.__reactContainer === root.current</span>
  root<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt="reactRootNode"></p><ol start="3"><li>scheduleUpdateOnFiber -&gt; performSyncWorkOnRoot -&gt; workLoopSync -&gt; performUnitOfWork</li><li>performSyncWorkOnRoot -&gt; commitWork</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>shouldYield<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// shouldYield 可中断，不执行下一次beginWork</span>
    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">unitOfWork</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//                            current↓</span>
  <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>unitOfWork<span class="token punctuation">.</span>alternate<span class="token punctuation">,</span> unitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果没有产生新的work，就完成当前work</span>
    <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>unitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    workInProgress <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beginwork" tabindex="-1"><a class="header-anchor" href="#beginwork" aria-hidden="true">#</a> beginWork</h3><ul><li><p>使用 v-dom 和 current fiber <strong>对比</strong>，生成新的 workInProgressFiber， 向下按照 child 指针逐层向下调和</p></li><li><p>期间会执行函数组件，类组件（声明周期），diff 子节点，</p></li><li><p><strong>标记上不同的 effectTag</strong> 也就是 flags 属性，增删改</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> workInProgress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 根据 current === null 判断是mount 还是 update</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">IndeterminateComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="completework" tabindex="-1"><a class="header-anchor" href="#completework" aria-hidden="true">#</a> completeWork</h3><ul><li><p>向上归并的过程，有兄弟节点就返回兄弟节点</p></li><li><p>根据 effectTag 创建 effectList</p></li><li><p>创建真实 dom，<code>createInstance</code>， 放到 fiber 中</p></li></ul><h3 id="commitwork" tabindex="-1"><a class="header-anchor" href="#commitwork" aria-hidden="true">#</a> commitWork</h3><p>render 结束后，在<code>performSyncWorkOnRoot</code>中调用<code>commitWork</code>, 最后进到<code>commitRootImpl.bind()</code></p><p>flushPassiveEffects() 用来处理还没执行完的 useEffect，上一次销毁函数，这一次回调函数</p><p>commitWork 也有三个阶段</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">invokeGuardedCallback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> commitBeforeMutationEffects<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新前</span>
<span class="token comment">// 更新前调用 getSnapshotBeforeUpdate</span>
<span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 之后开始更新，mutation阶段，处理placement， deletion，update</span>
<span class="token function">invokeGuardedCallback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> commitMutationEffects<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新时</span>
<span class="token comment">// 更新完切换双缓存</span>
root<span class="token punctuation">.</span>current <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span> <span class="token comment">// 切换双缓存</span>
<span class="token comment">// 更新后 声明周期componentDidMount,componentDidUpdate, setState的callback在这里执行</span>
<span class="token comment">// useEffect push到一个队列里异步执行，调用useLayoutEffect， 同步执行</span>
<span class="token function">invokeGuardedCallback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> commitLayoutEffects<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新后</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可中断更新" tabindex="-1"><a class="header-anchor" href="#可中断更新" aria-hidden="true">#</a> 可中断更新</h2><p>如何调用下一次任务， 而且不阻塞渲染？</p><ul><li>requestIdleCallback，时间不确定，兼容性差</li><li>setTimeout，嵌套的话有 4ms 延迟</li><li>promise，不需要为任务，需要宏任务，需要在渲染后执行</li><li>requestAnimationFrame 也在渲染之前</li><li>MessageChannel 可以</li></ul><h3 id="模拟实现" tabindex="-1"><a class="header-anchor" href="#模拟实现" aria-hidden="true">#</a> 模拟实现</h3><ol><li>有 tash 就用 MessageChannel，预定(startTransition)下一个宏任务(flush)(类似于 vue 的 $nextTick)</li><li>flush 循环执行 task，碰到 shouldYield 就停止循环，再预定下一个宏任务(startTransition(flush))</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> taskQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> transitionQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> deadline<span class="token punctuation">;</span>
<span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 5ms 超时</span>

<span class="token keyword">function</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token parameter">task</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  taskQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 预定一个调度</span>
  <span class="token function">startTransition</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token parameter">flush</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  transitionQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// postMessage 利用MessageChannel预定下一个宏任务</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> postMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// IIFE</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> port1<span class="token punctuation">,</span> port2 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 下一个宏任务执行 需要执行flush, [flush]</span>
    transitionQueue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回开始计时的函数, 类似于vue 的 $nextTick</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> port2<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果超时， 或者用isInputPending模拟更高优先级任务，就打断</span>
  <span class="token keyword">return</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> deadline <span class="token operator">||</span> navigator<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span><span class="token function">isInputPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 类似于 workLoopConcurrent</span>
  <span class="token comment">// 更新超时时间，shouldYield 可以用来比较</span>
  deadline <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> threshold<span class="token punctuation">;</span>

  <span class="token keyword">let</span> workInProgress <span class="token operator">=</span> taskQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// task 类似于 workInProgress</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    workInProgress <span class="token operator">=</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 执行到这里有两种情况</span>
  <span class="token comment">// 1. workInProgress 没有了，完全执行完了</span>
  <span class="token comment">// 2. 被shouldYield打断了</span>
  <span class="token comment">// 如果被打断了，就再预定下一个定时</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 下一次flush执行还能找到当前的task</span>
    taskQueue<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开启一次调度</span>
    <span class="token function">startTransition</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),i=[c];function l(u,r){return s(),a("div",null,i)}const k=n(o,[["render",l],["__file","react原理.html.vue"]]);export{k as default};

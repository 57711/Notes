import{_ as e,o as a,c as s,e as n}from"./app-7D7ZZLlA.js";const t={},i=n(`<h1 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> tree shaking</h1><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h2><ol><li>Make 阶段， 从入口文件遍历所有模块，形成AST，模块依赖关系图 ModuleGraph</li><li>Seal 阶段，运行代码，遍历ModuleGraph，用到过的代码，做好标记</li><li>Terser 删掉这些没被用到的导出语句。</li></ol><p>Tree Shaking在去除代码冗余的过程中，程序会从入口文件出发扫描所有的模块依赖，以及模块的子依赖，然后将它们链接起来形成一个“抽象语法树”(AST)。随后，运行所有代码，查看哪些代码是用到过的，做好标记。最后，再将“抽象语法树”中没有用到的代码“摇落”。经历这样一个过程后，就去除了没有用到的代码。</p><p>webpack 中配置 <code>optimization.usedExports = true</code></p><p>或者package.json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;sideEffects&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.css&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*.scss&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="下面我们看下es-module的特性" tabindex="-1"><a class="header-anchor" href="#下面我们看下es-module的特性" aria-hidden="true">#</a> 下面我们看下ES Module的特性</h2><ul><li>只能作为模块顶层的语句出现（而不嵌套在条件语句中）</li><li>import 的模块名只能是字符串常量（只对文件进行字符串读取）</li><li>导入和导出语句没有动态部分（不允许使用变量等）静态导入</li></ul>`,9),o=[i];function l(c,r){return a(),s("div",null,o)}const p=e(t,[["render",l],["__file","tree shaking.html.vue"]]);export{p as default};

import{_ as n,o as s,c as a,e as t}from"./app-7D7ZZLlA.js";const p={},e=t(`<h1 id="为什么选择函数组件" tabindex="-1"><a class="header-anchor" href="#为什么选择函数组件" aria-hidden="true">#</a> 为什么选择函数组件</h1><h2 id="类和函数组件" tabindex="-1"><a class="header-anchor" href="#类和函数组件" aria-hidden="true">#</a> 类和函数组件</h2><p>React 中的类通常被称为“类组件”。它们传统上用于定义组件并管理其状态和生命周期。类组件扩展了 React.Component 类，并且需要更多样板代码。</p><p>函数组件是定义 React 组件的一种更简洁、更现代的方式。它们也被称为“功能组件”。函数组件本质上是返回 JSX 元素的 JavaScript 函数。</p><h2 id="函数组件优势" tabindex="-1"><a class="header-anchor" href="#函数组件优势" aria-hidden="true">#</a> 函数组件优势</h2><ul><li>代码少，使用函数式编程，没有<code>this</code></li><li>hooks 性能好，简化生命周期</li><li>使用闭包，变量是当前函数内部的</li></ul><p>先点 button，再修改 props</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ComFn</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数式组件的函数被调用了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//这个是闭包：</span>
  <span class="token comment">// 每调用一次父函数（ComFn），都会重新定义一个新的子函数。新的函数中保存着父函数新的形参</span>
  <span class="token keyword">const</span> <span class="token function-variable function">showMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数式组件: &#39;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">//这个是闭包：</span>
  <span class="token comment">//每调用一次父函数（ComFn），都会重新定义一个新的子函数。新的函数中保存着父函数新的形参</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>showMessage<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;skyblue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h5<span class="token operator">&gt;</span>我是函数式组件<span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>name：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span><span class="token comment">/*先点击这个按钮，调用，第一次定义的 showMessage和handleClick*/</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;调用带着定时器的函数&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数组件问题" tabindex="-1"><a class="header-anchor" href="#函数组件问题" aria-hidden="true">#</a> 函数组件问题</h2><ul><li>使用闭包，有陷阱</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><strong>界面应当是数据的不同形式的简单投影。相同的输入应该产生相同的输出。</strong></p><ul><li><p>而函数式组件的写法，使用闭包的特性，显然符合这一理念：每个闭包里保存在父函数的当前形参（props）和局部变量。</p><p>函数组件主要是函数式编程，无副作用，并且在引用的时候透明的特点</p></li><li><p>而类组件里，由于，每次读取数据，要根据 this 指针去读取，那必然不会读取到属于自己当前状态的值。而是更新后的最新的值。</p><p>类的组件主要是面向对象编程，是建立在继承之上，它的生命周期等核心概念的特点</p></li></ul><h2 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程" aria-hidden="true">#</a> 函数式编程</h2><ul><li>pros <ul><li>无状态</li><li>纯函数</li><li>利于组合</li></ul></li><li>cons <ul><li>闭包，内存泄漏，不利于垃圾回收</li><li>递归，迭代容易出错</li></ul></li></ul>`,15),o=[e];function l(c,i){return s(),a("div",null,o)}const u=n(p,[["render",l],["__file","为什么选择函数组件.html.vue"]]);export{u as default};

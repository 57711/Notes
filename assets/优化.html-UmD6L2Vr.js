import{_ as e,o as a,c as i,e as l}from"./app-7D7ZZLlA.js";const t="/Notes/images/timestamp-diagram.svg",r={},s=l('<h1 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h1><p><img src="'+t+`" alt="timestamp of performance"></p><h2 id="dns-查询优化" tabindex="-1"><a class="header-anchor" href="#dns-查询优化" aria-hidden="true">#</a> DNS 查询优化</h2><p>使用 dns-prefetch，在解析主体 HTML 的同时，就会解析制定域名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;dns-prefetch&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;//www.xxx.com&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="tcp-连接" tabindex="-1"><a class="header-anchor" href="#tcp-连接" aria-hidden="true">#</a> TCP 连接</h2><p>使用 preconnect 指令，让连接在使用之前就已经建立好。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;preconnect&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;//www.xxx.com&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="避免重定向" tabindex="-1"><a class="header-anchor" href="#避免重定向" aria-hidden="true">#</a> 避免重定向</h2><ul><li>利用 CDN 云端重定向。</li><li>统一域名使用 Web 服务器上的 rewrite 规则，避免重定向。</li></ul><h2 id="缓存策略" tabindex="-1"><a class="header-anchor" href="#缓存策略" aria-hidden="true">#</a> 缓存策略</h2><p>缓存方式按照优先级高到低</p><ul><li>Memory Cache 预加载 <ul><li><code>&lt;link rel=&quot;prefetch&quot;&gt;</code></li><li><code>&lt;link rel=&quot;preload&quot;&gt;</code></li></ul></li><li>Service Worker / Cache</li><li>HTTP Cache，强缓存。协商缓存</li><li>Push “Cache”, HTTP/2</li><li>本地 localstorage</li><li>CacheStorage</li></ul><h3 id="http-缓存" tabindex="-1"><a class="header-anchor" href="#http-缓存" aria-hidden="true">#</a> http 缓存</h3><p>入口 html 文件设置协商缓存， cache-control： no-cache</p><p>其余文件设置强缓存 etag</p><h4 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h4><p>不向服务器发请求</p><ul><li><code>cache-control: public , max-age=10</code> 过期时长秒，优先级高 <ul><li>public, 可存于中间服务器，代理的缓存，shared cache</li><li>private， 只能被浏览器缓存，private cache</li><li>max-age 表示资源会缓存的具体时间。</li><li>no-cache 不使用本地缓存。需要使用缓存协商。</li><li>no-store 直接禁止游览器缓存数据, 每次请求都会下载完整资源</li></ul></li><li><code>expires: &lt;过期时间&gt;</code></li></ul><p>Cache-Control 优先级高于 Expires，http1.1 优先级更高 \`</p><h4 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h4><p>返回 304</p><ul><li><code>etag / if-none-match：&lt;etag&gt;</code> 优先级高 <ul><li>etag 优点， 解决 1 秒内多个修改</li></ul></li><li><code>last-modified: &lt;最后修改时间&gt;/if-modified-since</code><ul><li>如果 <code>if-modified-since &gt;= last-modified</code> 返回 304</li></ul></li></ul><p>ETag 的优先级高于 Last-Modified， http1.1 优先级更高</p><h4 id="启发式缓存" tabindex="-1"><a class="header-anchor" href="#启发式缓存" aria-hidden="true">#</a> 启发式缓存</h4><p>头没有设置强缓存， 但是 Last-Modified，设置缓存时间为 <code>(Date - Last-Modified)*0.1</code></p><p>只有在服务端没有返回明确的缓存策略时才会激活浏览器的启发式缓存策略。</p><h2 id="请求响应过程" tabindex="-1"><a class="header-anchor" href="#请求响应过程" aria-hidden="true">#</a> 请求响应过程</h2><h3 id="大包个数及大小优化" tabindex="-1"><a class="header-anchor" href="#大包个数及大小优化" aria-hidden="true">#</a> 大包个数及大小优化</h3><ul><li>Gzip <ul><li>compressionPlugin</li></ul></li><li>包的个数 <ul><li>MiniCssExtractPlugin</li><li>多入口 dependsOn 公共打包</li><li>动态导入 import（）</li><li>codesplit / runtimeChunk/ vendor</li></ul></li><li>包的大小 <ul><li>htmlWebpackPlugin minify</li><li>concatenateMode: true // 作用域提升</li><li>tree shacking // usedExports/ sideEffects</li><li>terser / css-minimizer-webpack-plugin</li></ul></li><li>打包， minify， tree shaking， runtime 按需加载， 分割，其他资源</li><li>hash / contentHash</li></ul><h3 id="基于构建工具的优化-webpack" tabindex="-1"><a class="header-anchor" href="#基于构建工具的优化-webpack" aria-hidden="true">#</a> 基于构建工具的优化 webpack</h3><ul><li>包大小 <ul><li>压缩 js / css/ html / 资源文件： terser， uglifyJS， CSSNano，css-minimizer-webpack-plugin</li><li>资源优化：字体子集化，图片 base64</li><li>Gzip</li><li>TreeShaking ： usedExports / sideEffects</li><li>concatenateMode 作用域提升</li></ul></li><li>包个数 <ul><li>代码分割策略：多入口/动态加载/ runtime</li><li>动态加载 import（）</li><li>首屏资源与其他资源分离</li></ul></li><li>缓存 <ul><li>哈希文件名</li></ul></li></ul><h3 id="http2" tabindex="-1"><a class="header-anchor" href="#http2" aria-hidden="true">#</a> http2</h3><p>tls 握手后会决定是否使用 http2</p><h4 id="帧" tabindex="-1"><a class="header-anchor" href="#帧" aria-hidden="true">#</a> 帧</h4><p>HTTP2 是基于帧的协议, HTTP1 是以文本来分隔，服务器只能根据文本换行符来拆分请求数据。</p><p>分帧会来来如下好处：</p><ol><li><p>二进制协议：HTTP2 的分帧层是基于帧的二进制协议，方便机器解析。</p></li><li><p>首部压缩：仅仅使用二进制协议还不够，HTTP2 的首部还会被深度压缩。 HTTP2 使用 HPACK 压缩</p></li><li><p>多路复用：当你在使用 HTTP2 传输链接的时候，不必等待上一个请求结束后才进行下一个请求，请求和响应可以交织在一起。</p></li></ol><div class="custom-container tip"><p class="custom-container-title">GZIP 压缩有泄漏加密信息的风险</p><p>CRIME 原理：攻击者在请求中添加数据，观察压缩加密后的数据量，如果变小了，就证明注入的数据和请求中的其他内容有重复，进而搞清楚所有的加密数据内容。</p></div><div class="custom-container tip"><p class="custom-container-title">HPACK 原理</p><p>请求发送时根据首部创建一张表，服务器接收到数据也会创建对应的表。在之后的请求中，如果首部是相同的，只用发送表中对应的索引，而不用发送整个头。服务端根据索引还原对应首部。</p></div><h4 id="流" tabindex="-1"><a class="header-anchor" href="#流" aria-hidden="true">#</a> 流</h4><p>流是 HTTP2 链接上独立的，双向的帧序列交换。可以将流看作在连接上的<strong>一系列帧</strong>，他们构成了单独的 HTTP 请求和响应。</p><ol><li><p>消息：泛指 HTTP 中一个请求或一个响应。</p></li><li><p>流量控制：当一段接收并消费被发送的数据时，它将发出一个 WINDOW_UPDATE 帧，用来表示其更新后的处理字节的能力。确保一个流不会影响到其他的流。</p></li><li><p>优先级：首先请求网页上最重要的元素，以最优的顺序获取资源，由此来优化页面性能。</p><p>通过 HEADERS 帧可以指明某些对象和其他对象的依赖关系。</p><p>通过 PRIORITY 帧，可以告诉服务器如何确定具有共同依赖关系的对象的优先级。</p></li></ol><h4 id="服务器推送" tabindex="-1"><a class="header-anchor" href="#服务器推送" aria-hidden="true">#</a> 服务器推送</h4><p>提升单个资源性能的最佳方式，就是在它被用到之前就放到了浏览器的缓存里，服务器端可以主动将资源发给客户端，这可能是因为它知道客户端不久后将会用到该资源。</p><p>如果服务器决定推送一个对象，会通过 PUSH_PROMISE 帧去传递将会被推送的资源。</p><h4 id="http2-的坑" tabindex="-1"><a class="header-anchor" href="#http2-的坑" aria-hidden="true">#</a> http2 的坑</h4><ol><li><p>关于丢包。之前说到，HTTP2 采用多路复用，可以让多个请求在同一个 TCP 连接中进行传输，但是由于 HTTP2 是单链接架构，如果唯一的连接发生了丢包，所有的工作都会受到影响，这其实是 HTTP2 中比较大的坑。HTTP1 在请求时建立了多个连接（6 个），当有一个连接发生丢包时，不会影响到其他请求。</p></li><li><p>关于服务器端推送。服务器端推送可以主动给客户端推送资源，用来减少客户端发起请求数量。如果推送的资源在客户端已经缓存过，那就是多此一举了，所以在做服务器端渲染时，一定要和客户端的缓存策略结合起来</p></li></ol><h4 id="http2-带来的修改" tabindex="-1"><a class="header-anchor" href="#http2-带来的修改" aria-hidden="true">#</a> http2 带来的修改</h4><ol><li>不需要拆分域名，多个 DNS 域名服务器。</li><li>内联资源，雪碧图之类的没有必要。</li><li>禁用带 cookie 的域名。在 HTTP1 中，由于无法压缩首部，会启动一个无 cookie 的服务器专门用来存放某些静态资源，用来减少不必要的 cookie 传输。在 HTTP2 中，首部信息会被 HPACK 算法优化，大大减少了首部字节，而且不用心增一个无 cookie 的服务器，所以建议取消掉禁用 cookie 域名的方式。</li><li>资源预取，prefetch，preload。</li></ol><h3 id="http3" tabindex="-1"><a class="header-anchor" href="#http3" aria-hidden="true">#</a> HTTP3</h3><p>QUIC， 利用 UDP</p><p>TLS1.3 建立连接只需要一次往返，恢复连接不需要往返。</p><h2 id="解析-html" tabindex="-1"><a class="header-anchor" href="#解析-html" aria-hidden="true">#</a> 解析 html</h2><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> css</h3><p>css 在头部请求，防止阻塞 dom 渲染</p><h3 id="defer-async" tabindex="-1"><a class="header-anchor" href="#defer-async" aria-hidden="true">#</a> defer / async</h3><p><strong>内联 script 和 script 前的 style</strong> 阻塞 html 解析， 同步下载</p><p><strong>外联 defer script</strong> 并行下载， 在 html 解析完成后顺序执行， 之后发 DOMContentLoaded</p><p><strong>外联 async script</strong> 并行下载， 一旦下载完就执行， 与 DOMContentLoaded 无关</p><p><strong>Async 比 defer 优先级高</strong></p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><ul><li>html/css 渲染</li><li>阻塞性代码</li><li>回流 几何属性 与重绘 外观属性</li><li>CSS 变换 使用 transform ， 不增加重排</li><li>transition</li><li>css gpu</li><li>SSR</li></ul><h2 id="webpack-打包时优化" tabindex="-1"><a class="header-anchor" href="#webpack-打包时优化" aria-hidden="true">#</a> webpack 打包时优化</h2><ul><li>缓存 配置 cache 属性</li><li>并行/多线程 terserWebpackPlugin / thread-loader</li><li>减少打包范围， 配置 exclude， 不产生 sourcemap</li><li>使用高效编译器 esBuild</li></ul>`,65),n=[s];function d(c,h){return a(),i("div",null,n)}const p=e(r,[["render",d],["__file","优化.html.vue"]]);export{p as default};

import{_ as t,r as o,o as c,c as i,a as n,d as a,b as e,e as p}from"./app-7D7ZZLlA.js";const l="/Notes/images/js对象结构.png",r="/Notes/images/js对象结构隐藏类.png",u="/Notes/images/命名属性例子.png",d="/Notes/images/命名属性例子2.png",k={},m=n("h1",{id:"浏览器内存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#浏览器内存","aria-hidden":"true"},"#"),a(" 浏览器内存")],-1),v={href:"https://blog.csdn.net/kaimo313/article/details/125049938",target:"_blank",rel:"noopener noreferrer"},b=p('<h2 id="v8-中对象的结构" tabindex="-1"><a class="header-anchor" href="#v8-中对象的结构" aria-hidden="true">#</a> V8 中对象的结构</h2><p>在 V8 中，对象主要由三个指针构成，分别是隐藏类（Hidden Class）(V8 中为 Map)，Property 还有 Element。</p><ul><li><p>隐藏类用于描述对象的结构。</p></li><li><p>Property 和 Element 用于存放对象的属性，Element 键名可索引， Property 命名属性。</p></li></ul><p><img src="'+l+'" alt="js对象结构"></p><h2 id="隐藏类" tabindex="-1"><a class="header-anchor" href="#隐藏类" aria-hidden="true">#</a> 隐藏类</h2><ul><li>实现对象属性的快速存取。</li><li>将属性的 value 和其他 descriptor 分开，因为 descriptor 不经常修改。</li><li>每添加一个命名属性，都会生成新的隐藏类，其中有<code>back_pointer</code> 指向上一个隐藏类。</li><li>要生成相同的隐藏类，需要 <ul><li>从相同的起点，</li><li>以相同的顺序，</li><li>添加结构相同的属性（除 Value 外，属性的 Attribute 一致）。</li></ul></li></ul><p><img src="'+r+`" alt="js对象结构隐藏类"></p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 添加属性会生成隐藏类</span>
<span class="token keyword">function</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;kaimo&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 查看a的map地址指向</span>
s<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 再查看a的map地址指向，map内的back_pointer 指向上一个快照的map地址。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建相同的隐藏类</span>
<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;kaimo&#39;</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">&#39;8&#39;</span><span class="token punctuation">;</span>

b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;kaimo&#39;</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 查看a和b的map</span>

<span class="token keyword">delete</span> a<span class="token punctuation">.</span>age<span class="token punctuation">;</span>

<span class="token comment">// 再次查看a和b的map， a和b的map指向同一个地址。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命名属性的不同存储方式" tabindex="-1"><a class="header-anchor" href="#命名属性的不同存储方式" aria-hidden="true">#</a> 命名属性的不同存储方式</h2><p>V8 中命名属性有三种的不同存储方式：对象内属性（in-object）、快属性（fast）和慢属性（slow）。</p><ul><li>对象内属性保存在对象本身，提供最快的访问速度。</li><li>快属性比对象内属性多了一次寻址时间。在对象内属性放满之后，会以快属性存放。</li><li>慢属性与前面的两种属性相比，会将属性的完整结构存储，速度最慢。转换为哈希。</li></ul><h3 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1" aria-hidden="true">#</a> 例子</h3><h4 id="可索引属性和命名属性" tabindex="-1"><a class="header-anchor" href="#可索引属性和命名属性" aria-hidden="true">#</a> 可索引属性和命名属性</h4><ul><li>map 为隐藏类</li><li><code>__poroto__</code> 为原型链属性</li><li>element 为可索引属性</li><li>添加的两个命名属性<code>name, text</code> 内部都有 map</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">;</span>

b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">;</span>

a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt="命名属性例子"></p><p>当添加<code>a[100] = &quot;a100&quot;</code> 会变味稀疏数组，转换为哈希存储。</p><p><img src="'+d+`" alt="命名属性例子2"></p><h4 id="property-存储模式-对象内-快属性-慢属性" tabindex="-1"><a class="header-anchor" href="#property-存储模式-对象内-快属性-慢属性" aria-hidden="true">#</a> Property 存储模式：对象内，快属性，慢属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  b<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  c<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;ccc&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// a 全部为对象内保存属性，没有properties</span>
<span class="token comment">// b 有properties，在 properties 下按创建顺序存放，索引 0，1...</span>
<span class="token comment">// c 的properties 中的索引变成了毫无规律的数，变为哈希存取结构。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete</h2><p>delete 的缺点：</p><ul><li>delete 很多时候删不掉。</li><li>delete 返回 true 的时候，也不代表一定删除成功。 比如原型上的属性。</li><li>delete 某些场景下会导致隐藏类改变，可能导致性能问题。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">;</span>
  b<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 查看快照</span>

<span class="token keyword">delete</span> a<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
<span class="token comment">// 删除a后，a 变为慢属性，退回哈希存储了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-log" tabindex="-1"><a class="header-anchor" href="#console-log" aria-hidden="true">#</a> console.log</h2><p>js 会开辟 heap 内存，不开 devtools，console.log 也会占用内存，且没办法 gc。devtools 内部会生成内存模型。<code>FinalizationRegistry()</code>可以试验。</p><p>html 文本转换生成的 renderobject（rendertree），renderlayer，可能会成百倍增加，都会占内存</p><p>用 GPU 加速的 graplayer 也会占用内存，</p><p>cssom renderstyle 也吃内存，同时 cpu 需要对每个节点递归，也吃 cpu</p><p>所以无效的 dom，css 都要删除，都会占内存</p><h2 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h2>`,33),h={href:"/nodejs/#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6-gc",target:"_blank",rel:"noopener noreferrer"},g=p('<p>垃圾回收方法</p><ul><li>引用计数</li><li>标记清除，用于 v8 老生代</li><li>Cheney，用于 v8 新生代</li></ul><h3 id="新生代与老生代" tabindex="-1"><a class="header-anchor" href="#新生代与老生代" aria-hidden="true">#</a> 新生代与老生代</h3><p>绝对大多数的应用程序对象的存活周期都会很短，而少数对象的存活周期将会很长。为了利用这种情况，V8 将堆分为两类：<strong>新生代</strong>和<strong>老生代</strong>，新生代中的对象都非常小大约为 1-8MB，这里的垃圾回收也很快。新生代空间中垃圾回收过程中幸存下来的对象会被提升到老生代空间。</p><h4 id="新声代" tabindex="-1"><a class="header-anchor" href="#新声代" aria-hidden="true">#</a> 新声代</h4><h5 id="scavenge" tabindex="-1"><a class="header-anchor" href="#scavenge" aria-hidden="true">#</a> Scavenge</h5><p>垃圾回收很频繁，因此它的处理方式必须非常的快，采用的 Scavenge 算法，具体实现是 Cheney。</p><p>Scavenge 是一种复制算法，新生代空间会被一分为二划分成两个相等大小的 from-space 和 to-space。将 from 空间中存活的对象复制到 to 空间中或者提升到老生代空间中（晋升），而 from space 中没有存活的对象将会被释放。完成这些复制后在将 from space 和 to space 进行互换。简单来讲就是通过将存活对象在两个 semispace 空间之间进行复制。</p><h5 id="scavenge-的缺点" tabindex="-1"><a class="header-anchor" href="#scavenge-的缺点" aria-hidden="true">#</a> Scavenge 的缺点</h5><p>只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。</p><h5 id="scavenge-的优点" tabindex="-1"><a class="header-anchor" href="#scavenge-的优点" aria-hidden="true">#</a> Scavenge 的优点</h5><p>Scavenge 由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它<strong>在时间效率上有优异的表现。</strong> <strong>Scavenge 是典型的牺牲空间换取时间的算法，</strong> 所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge 非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。</p><h4 id="晋升" tabindex="-1"><a class="header-anchor" href="#晋升" aria-hidden="true">#</a> 晋升</h4><p>新生代中对象满足是否经历过 <strong>Scavenge 回收</strong>、<strong>to space 的内存占比</strong>，会晋升到老生代。</p><p>对象从新生代中移动到老生代中的过程称为晋升。</p><h4 id="老生代" tabindex="-1"><a class="header-anchor" href="#老生代" aria-hidden="true">#</a> 老生代</h4><p>Scavenge 的局限：</p><ul><li>老生代活对象多，复制效率低</li><li>浪费一半内存空间</li></ul><p>老生代使用算法：标记清除，标记整理（Mark-Sweep &amp;&amp; Mark-Compact）</p><h5 id="mark-sweep" tabindex="-1"><a class="header-anchor" href="#mark-sweep" aria-hidden="true">#</a> Mark-Sweep</h5><div class="custom-container tip"><p class="custom-container-title">Mark-Sweep 过程</p><p>Mark-Sweep 在标记阶段遍历堆中所有对象，并标记<strong>活着</strong>的对象，在随后的清除阶段中，只清除没有被标记的对象</p></div><ul><li>Scavenge 中只复制活着的对象 <ul><li>新生代中活对象只占较小部分，新生代死多。</li></ul></li><li>Mark-Sweep 只清理死亡对象 <ul><li>老生代中死对象只占较小部分，老生代活多。</li></ul></li></ul><p>Mark-Sweep 局限： 清除对象导致内存不连续，内存碎片化，所以需要 Mark-Compct</p><h4 id="mark-compact" tabindex="-1"><a class="header-anchor" href="#mark-compact" aria-hidden="true">#</a> Mark-Compact</h4><p>解决 Mark-Sweep 的内存碎片问题。但是处理慢，只有当空间不足以对从新生代中晋升过来的对象进行分配时才使用 Mark-Compact。</p><div class="custom-container tip"><p class="custom-container-title">Mark-Compct 过程</p><p>整理的过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存</p></div><h3 id="增量式标记回收-incremental-marking" tabindex="-1"><a class="header-anchor" href="#增量式标记回收-incremental-marking" aria-hidden="true">#</a> 增量式标记回收(Incremental Marking)</h3><p>小垃圾回收只收集新生代。全堆垃圾回收会一起回收老生代，会导致 js 停顿，优化的方法：</p><ol><li><p>标记阶段利用增量标记（incremental marking），拆分为许多小“步进”，每做完一“步进”就让 js 应用逻辑执行一小会，垃圾回收与应用逻辑交替执行直到标记阶段完成。</p></li><li><p>延迟清理（lazy sweeping）与增量式整理（incremental compaction），清理与整理动作也变成增量式的。</p></li><li><p>并行标记与并行清理</p></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>避免内存泄漏</p><ul><li>慎将内存做为缓存</li><li>模块私有变量内存永驻 <ul><li>形成闭包，避免不必要的模块加载</li></ul></li></ul>',32);function w(y,f){const s=o("ExternalLinkIcon");return c(),i("div",null,[m,n("p",null,[n("a",v,[a("chrome 内存"),e(s)])]),b,n("p",null,[n("a",h,[a("垃圾回收"),e(s)])]),g])}const x=t(k,[["render",w],["__file","内存.html.vue"]]);export{x as default};

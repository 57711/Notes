import{_ as r,r as n,o as t,c as i,a as e,d as o,b as d,e as h}from"./app-7D7ZZLlA.js";const c={},l=h('<h1 id="字典树trie" tabindex="-1"><a class="header-anchor" href="#字典树trie" aria-hidden="true">#</a> 字典树Trie</h1><p>用于统计排序大量字符串，它的优点是：最大限度地減少无谓的字符串比较，查询效率比哈希表高。经常被搜索引擎系统用于文本词频统计</p><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><p>每个节点是一个数组， 元素指向下一个节点, isEndOfWord 第几层存第几位字母</p><h2 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想" aria-hidden="true">#</a> 核心思想</h2><p>Trie的核心思想是空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的</p><h2 id="基本性质" tabindex="-1"><a class="header-anchor" href="#基本性质" aria-hidden="true">#</a> 基本性质</h2><ol><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同。</li></ol><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2>',9),s={href:"https://leetcode.cn/problems/word-search/",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"需要搜索的放入Trie， DFS 遍历表格",-1);function p(f,u){const a=n("ExternalLinkIcon");return t(),i("div",null,[l,e("ul",null,[e("li",null,[e("a",s,[o("字典搜索"),d(a)])])]),_])}const m=r(c,[["render",p],["__file","字典树.html.vue"]]);export{m as default};

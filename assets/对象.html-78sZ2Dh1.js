import{_ as n,o as s,c as a,e as t}from"./app-7D7ZZLlA.js";const e={},p=t(`<h1 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h1><h2 id="对象循环遍历方法" tabindex="-1"><a class="header-anchor" href="#对象循环遍历方法" aria-hidden="true">#</a> 对象循环遍历方法</h2><h3 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> <code>for in</code></h3><p>可以拿到<strong>可枚举</strong>属性，以及原型上的属性, <strong>非自身</strong>属性</p><h3 id="object-keys-object-values-object-ectries" tabindex="-1"><a class="header-anchor" href="#object-keys-object-values-object-ectries" aria-hidden="true">#</a> <code>Object.keys(), Object.values(), Object.ectries()</code></h3><p>返回<strong>自身</strong>的<strong>可枚举</strong>属性， 不包含继承的和 symbol</p><p><code>Array.keys()</code> 返回迭代器实例</p><h3 id="object-getownpropertynames-object-getownpropertysymbols" tabindex="-1"><a class="header-anchor" href="#object-getownpropertynames-object-getownpropertysymbols" aria-hidden="true">#</a> <code>Object.getOwnPropertyNames()</code> <code>Object.getOwnPropertySymbols()</code></h3><p>返回<strong>自身</strong>的属性/symbol，包括不可枚举的和可枚举</p><h3 id="reflect-ownkeys" tabindex="-1"><a class="header-anchor" href="#reflect-ownkeys" aria-hidden="true">#</a> <code>Reflect.ownKeys()</code></h3><p>返回<strong>自身的</strong>所有属性，包括<strong>symbols 和 names</strong></p><h3 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of" aria-hidden="true">#</a> for of</h3><p>本身只能用来遍历 array，本质上调用 Symbol.iterator。因为对象没有 iterator，可以给对象添加 iterator。</p><p><strong>迭代器模式</strong>，按顺序执行，访问各个元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回一个迭代器</span>
    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> ks <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// 迭代器执行后有next方法</span>
      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> self<span class="token punctuation">[</span>ks<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">done</span><span class="token operator">:</span> idx <span class="token operator">&gt;</span> ks<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 实际调用</span>

<span class="token keyword">const</span> it <span class="token operator">=</span> obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: &#39;a&#39;, done: false}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: &#39;b&#39;, done: false}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: &#39;c&#39;, done: false}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: undefined, done: true}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-的-length" tabindex="-1"><a class="header-anchor" href="#array-的-length" aria-hidden="true">#</a> array 的 length</h3><p>array 的 length 是自身属性，但不可枚举</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>只遍历可枚举的有 <code>for in</code>, <code>Object.keys(), values(), entries()</code></p><p>可遍历原型上的 <code>for in</code></p><table><thead><tr><th>遍历方法</th><th>自身属性</th><th>继承属性</th><th>遍历基本属性</th><th>遍历原型链</th><th>遍历不可枚举属性</th><th>属性类型</th></tr></thead><tbody><tr><td><code>for ... in</code></td><td>自身</td><td>继承</td><td>是</td><td>是</td><td></td><td>基本属性</td></tr><tr><td><code>Object.keys()</code></td><td>自身</td><td></td><td>是</td><td></td><td></td><td>基本属性</td></tr><tr><td><code>Object.getOwnPropertyNames()</code></td><td>自身</td><td></td><td>是</td><td></td><td>是</td><td>基本属性</td></tr><tr><td><code>Object.getOwnPropertySymbols()</code></td><td>自身</td><td></td><td></td><td></td><td>是</td><td>Symbol 属性</td></tr><tr><td><code>Reflect.ownKeys()</code></td><td>自身</td><td></td><td>是</td><td></td><td>是</td><td>基本+Symbol</td></tr></tbody></table><h2 id="对象指针" tabindex="-1"><a class="header-anchor" href="#对象指针" aria-hidden="true">#</a> 对象指针</h2><p>变量 =&gt; 栈（地址）=&gt; 堆（值）</p><h2 id="判断-object-还是-array" tabindex="-1"><a class="header-anchor" href="#判断-object-还是-array" aria-hidden="true">#</a> 判断 Object 还是 Array</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断array</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// 判断object</span>
obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="两层循环跳出" tabindex="-1"><a class="header-anchor" href="#两层循环跳出" aria-hidden="true">#</a> 两层循环跳出</h2><p>用 label 语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>

<span class="token literal-property property">loop1</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//The first for statement is labeled &quot;loop1&quot;</span>
  <span class="token literal-property property">loop2</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//The second for statement is labeled &quot;loop2&quot;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span> loop1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;i = &#39;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&#39;, j = &#39;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//   &quot;i = 0, j = 0&quot;</span>
<span class="token comment">//   &quot;i = 0, j = 1&quot;</span>
<span class="token comment">//   &quot;i = 0, j = 2&quot;</span>
<span class="token comment">//   &quot;i = 1, j = 0&quot; skips both &quot;i = 1, j = 1&quot; and &quot;i = 1, j = 2&quot;</span>
<span class="token comment">//   &quot;i = 2, j = 0&quot;</span>
<span class="token comment">//   &quot;i = 2, j = 1&quot;</span>
<span class="token comment">//   &quot;i = 2, j = 2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","对象.html.vue"]]);export{u as default};

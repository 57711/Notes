import{_ as a,o as n,c as i,e as l}from"./app-7D7ZZLlA.js";const s={},t=l(`<h1 id="性能指标" tabindex="-1"><a class="header-anchor" href="#性能指标" aria-hidden="true">#</a> 性能指标</h1><ul><li><p>First Paint 首次绘制（FP）这个指标用于记录页面第一次绘制像素的时间，如显示页面背景色。FP 不包含默认背景绘制，但包含非默认的背景绘制。</p></li><li><p>First contentful paint 首次内容绘制 (FCP)LCP 是指页面开始加载到最大文本块内容或图片显示在页面中的时间。如果 FP 及 FCP 两指标在 2 秒内完成的话我们的页面就算体验优秀。</p></li><li><p>Largest contentful paint 最大内容绘制 (LCP)用于记录视窗内最大的元素绘制的时间，该时间会随着页面渲染变化而变化，因为页面中的最大元素在渲染过程中可能会发生改变，另外该指标会在用户第一次交互后停止记录。官方推荐的时间区间，在 2.5 秒内表示体验优秀</p></li><li><p>First input delay 首次输入延迟 (FID)首次输入延迟，FID（First Input Delay），记录在 FCP 和 TTI 之间用户首次与页面交互时响应的延迟。</p><p>FID 测量浏览器能够处理用户交互所需的时间，仅限于单击、按键、鼠标按下和指针按下。</p><p>网页响应能力</p></li><li><p>Time to Interactive 可交互时间 (TTI)首次可交互时间，TTI（Time to Interactive）。这个指标计算过程略微复杂.</p></li><li><p>CLS 视觉稳定性，页面结构</p></li></ul><h2 id="lcp-可能被这四个因素影响" tabindex="-1"><a class="header-anchor" href="#lcp-可能被这四个因素影响" aria-hidden="true">#</a> LCP 可能被这四个因素影响</h2><p>LCP &lt; 2.5s</p><ul><li>服务端响应时间</li><li>Javascript 和 CSS 引起的渲染卡顿</li><li>资源加载时间</li><li>客户端渲染</li></ul><h3 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h3><ul><li><p>服务器优化</p><ul><li>缓存</li><li>资源/图片优化</li><li>文件大小/webpack chunkSplit</li><li>CDN， 缩小 TIme to First Byte  时间</li></ul></li><li><p>渲染优化</p><ul><li><p>js css 阻塞解析渲染</p><ul><li>资源是否能被 HTML 预解析发现， 背景图或利用 js 加载的图片解析不到</li></ul></li><li><p>首屏优化 =&gt; 懒加载、异步加载</p><ul><li>fetchpriority 属性</li></ul></li><li><p>CSS 模块优化</p></li><li><p>SSR 服务端渲染</p></li></ul></li></ul><h2 id="fid-first-input-delay-可能被这四个因素影响-被-inp-替代" tabindex="-1"><a class="header-anchor" href="#fid-first-input-delay-可能被这四个因素影响-被-inp-替代" aria-hidden="true">#</a> FID （First input delay） 可能被这四个因素影响 / 被 INP 替代</h2><p>FID &lt; 100ms</p><ul><li><p>减少第三方代码的影响</p></li><li><p>减少 Javascript 的执行时间</p></li><li><p>最小化主线程工作</p></li><li><p>减小请求数量和请求文件大小</p></li><li><p>a. 减少 JS 的执行时间</p><ul><li>缩小压缩 JS 文件</li><li>延迟加载不需要的 JS =&gt; 模块懒加载 ｜ tree shaking</li><li>尽量减少未使用的 polyfill</li></ul></li><li><p>b. 分解耗时任务</p><ul><li>减少长逻辑 long task</li><li>异步化</li></ul></li><li><p>c. worker</p><ul><li>web worker | service worker</li><li>worker 处理竞争，可以加锁，或者用事件与回调来控制</li></ul></li></ul><h2 id="如何优化-cls-我们可以根据这些原则来避免非预期布局移动" tabindex="-1"><a class="header-anchor" href="#如何优化-cls-我们可以根据这些原则来避免非预期布局移动" aria-hidden="true">#</a> 如何优化 CLS 我们可以根据这些原则来避免非预期布局移动</h2><ul><li>图片或视屏元素有大小属性，或者给他们保留一个空间大小，设置 width、height，或者使用  unsized-media feature policy, aspect-ratio，box-sizing:border-box</li><li>不要在一个已存在的元素上面插入内容，除了相应用户输入。</li><li>多个插入改为整体化内容插入 ，减少重排重绘</li><li>使用 animation 或 transition 而不是直接触发布局改变。</li><li>BF Cache Backward/Forward Cache， 内存中存储 CLS 页面快照</li><li>动态字体控制</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 加载完默认字体再显示 =&gt; 先用默认字体渲染，下载完成之后，再替换成后续字体</span>
    @font<span class="token operator">-</span>face <span class="token punctuation">{</span>
        <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token string">&#39;xxx Regular&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">url</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> fonts<span class="token punctuation">.</span>xxxx<span class="token punctuation">.</span>com<span class="token operator">/</span>xxx<span class="token punctuation">.</span>woff2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
  <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aa-320w.jpg 320w, yy-480w.jpg 480w<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-widtth: 320p) 280px
          (max-widtth: 480p) 440px
          800px<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>yy.jpg<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>yy pic<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inp-interaction-to-next-paint-替代-fid" tabindex="-1"><a class="header-anchor" href="#inp-interaction-to-next-paint-替代-fid" aria-hidden="true">#</a> INP （interaction to next paint） 替代 FID</h2><ul><li>FID 仅测量延迟，即交互元素变得响应之前所需的时间。 点击的处理时间</li><li>FID 没有测量网站对这些交互做出反应所需的时间。</li><li>INP 衡量页面的整体响应能力，而不仅仅是延迟。而是整个页面生命周期中</li><li>当页面响应交互时，结果是视觉反馈，由浏览器在浏览器呈现的下一帧中呈现。</li><li>小于 200ms</li></ul><h3 id="解决目的就是释放主线程" tabindex="-1"><a class="header-anchor" href="#解决目的就是释放主线程" aria-hidden="true">#</a> 解决目的就是释放主线程</h3><ul><li>避免或分解长任务、50ms 以上的长任务 <ul><li>isInputPending、scheduler.postTask  和  scheduler.yield</li></ul></li><li>避免不必要的 JavaScript <ul><li>一开始就不要发送太大的  JavaScript。</li></ul></li><li>避免大量渲染更新。 <ul><li>保持较小的  Dom  结构</li><li>css Containment <ul><li>利用 css contain 创建新的包含块，BFC，layer</li><li>利用 css content-visibility  控制元素是否渲染其内容</li></ul></li><li>rAF 中只安排渲染有关逻辑</li></ul></li></ul><h2 id="大厂监控体系" tabindex="-1"><a class="header-anchor" href="#大厂监控体系" aria-hidden="true">#</a> 大厂监控体系</h2><p>从数据采集 =&gt; 汇总展示 =&gt; 定位问题分派</p><ul><li>埋点上报 =&gt; 点到点 + 信息采集（通过 api）</li><li>数据处理（数据清洗， 处理成需要的指标） =&gt; 阈值设置 + 数据分类（按端/按类型） + 数据重组（按需求重组）</li><li>可视化展示 <ul><li>grafana</li></ul></li><li>根据指标要求进行数据圈层</li><li>定位问题</li><li>告警</li></ul><h2 id="bigpipe" tabindex="-1"><a class="header-anchor" href="#bigpipe" aria-hidden="true">#</a> bigpipe</h2><p>页面分为多个 Pagelets，然后通过在服务器和浏览器上进行不同的执行方法来组合。这使得前端页面可以按进度进行内容的渲染，提升了前端的速度。</p>`,23),e=[t];function p(c,r){return n(),i("div",null,e)}const u=a(s,[["render",p],["__file","性能指标.html.vue"]]);export{u as default};

import{_ as g,r as u,o as f,c as k,a as t,b as s,w as a,d as n,e as p}from"./app-7D7ZZLlA.js";const y="/Notes/images/heap-array.png",v="/Notes/images/bubble-down.png",x="/Notes/images/截屏2023-12-16-22.05.42.png",b="/Notes/images/inorder.png",w={},M=t("h1",{id:"tree-graph",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#tree-graph","aria-hidden":"true"},"#"),n(" Tree & Graph")],-1),N={class:"table-of-contents"},O=t("h2",{id:"二叉树-二叉搜索树",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二叉树-二叉搜索树","aria-hidden":"true"},"#"),n(" 二叉树/二叉搜索树")],-1),L={class:"katex"},E={class:"katex-mathml"},z=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),B=p('<h3 id="堆-完全二叉树" tabindex="-1"><a class="header-anchor" href="#堆-完全二叉树" aria-hidden="true">#</a> 堆/完全二叉树</h3><h4 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a> 完全二叉树</h4><ul><li>只允许最后一行不满</li><li>且最后一行必须从左到右排序</li><li>最后一行元素之间不能有间隔</li></ul><h4 id="堆的实现" tabindex="-1"><a class="header-anchor" href="#堆的实现" aria-hidden="true">#</a> 堆的实现</h4><p>一个堆可以用一个一维数组来描述</p><p><img src="'+y+'" alt="一个堆可以用一个一维数组来描述"></p>',6),V={class:"katex"},j={class:"katex-mathml"},A=t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6595em"}}),t("span",{class:"mord mathnormal"},"i")])],-1),I={class:"katex"},q={class:"katex-mathml"},C=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span>',1),T={class:"katex"},D={class:"katex-mathml"},F=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span>',1),S={class:"katex"},G={class:"katex-mathml"},U=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span>',1),H={id:"堆的操作",tabindex:"-1"},J=t("a",{class:"header-anchor",href:"#堆的操作","aria-hidden":"true"},"#",-1),K={class:"katex"},P={class:"katex-mathml"},Q=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),R=p('<ul><li><p>上滤 bubbleUp，用于插入新元素到堆中</p></li><li><p>下滤 bubbleDown</p></li></ul><p><strong>上滤过程</strong>：根电节点向下调整。节点跟父节点比较，</p><ul><li>大顶堆：大于则交换。直到无法上移为止为止。</li><li>小顶堆：小于则交换。直到无法上移为止为止。</li></ul><p><strong>下滤过程</strong>：根电节点向下调整。</p><ul><li>大顶堆：节点跟自己最大的子节点比较，小于则交换。直到大于其子节点，或者移动到底部为止。</li><li>小顶堆：节点跟自己最小的子节点比较，大于则交换。直到小于其子节点，或者移动到底部为止。</li></ul><p><img src="'+v+'" alt="大顶堆下滤操作"></p><h4 id="建堆" tabindex="-1"><a class="header-anchor" href="#建堆" aria-hidden="true">#</a> 建堆</h4>',7),W={class:"katex"},X={class:"katex-mathml"},Y=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">Nl</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),Z=t("ol",null,[t("li",null,[t("code",null,"[3,4,5,6,1,7,8]")]),t("li",null,"先插入 3"),t("li",null,"再插入 4，上滤，4 为堆顶"),t("li",null,"再插入 5，上滤，5 为堆顶"),t("li",null,"..."),t("li",null,[t("code",null,"[8,5,7,3,1,4,6]")])],-1),$={class:"katex"},ss={class:"katex-mathml"},as=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),ns=p('<ol><li><code>[3,4,5,6,1,7,8]</code></li><li>从倒数第二排开始，下滤 5, <code>[3,4,8,6,1,7,5]</code></li><li>第二排下滤 4， <code>[3,6,8,1,4,7,5]</code></li><li>下滤第一排 3，3 下到最底层，<code>[8,6,7,4,1,3,5]</code></li></ol><h4 id="堆的应用" tabindex="-1"><a class="header-anchor" href="#堆的应用" aria-hidden="true">#</a> 堆的应用</h4>',2),ts={href:"/algorithem/%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html#%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},ls=p('<h3 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树" aria-hidden="true">#</a> 二叉搜索树</h3><p>空树，或者若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值</p><h3 id="二叉树遍历" tabindex="-1"><a class="header-anchor" href="#二叉树遍历" aria-hidden="true">#</a> 二叉树遍历</h3><p>前序 / 中序 / 后序 / 深度优先 / 广度优先</p><p>二叉搜索树用中序遍历会遍历出有序数组</p><p><img src="'+x+'" alt="前序遍历" title="前序遍历"></p><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3>',7),es={href:"https://leetcode.cn/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},ps=t("strong",null,"解 1",-1),os={class:"katex"},is={class:"katex-mathml"},cs=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),rs=p('<p><strong>解 2</strong>： 中序遍历， 但是不保存所有数组， 只记录前继节点， 当前子节点树与前继父节点比较</p><p>prev 节点的遍历顺序 中序</p><p><img src="'+b+`" alt="inorder" title="inorder"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> prev<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 当前节点需要比上次一节点大</span>
    prev <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),us=t("strong",null,"解 3",-1),ms={class:"katex"},ds={class:"katex-mathml"},hs=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">ma</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span>',1),_s={class:"katex"},gs={class:"katex-mathml"},fs=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9456em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">mi</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span>',1),ks={class:"katex"},ys={class:"katex-mathml"},vs=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8252em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">ma</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6542em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">roo</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9456em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">mi</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span>',1),xs={class:"katex"},bs={class:"katex-mathml"},ws=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),Ms=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> floor<span class="token punctuation">,</span> ceil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> floor <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> ceil<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">isValid</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> floor<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValid</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> ceil<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">isValid</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ns={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Os=t("p",null,[t("strong",null,"任意二叉树")],-1),Ls={class:"katex"},Es={class:"katex-mathml"},zs=p('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span>',1),Bs=t("p",null,[t("strong",null,"二叉搜索树")],-1),Vs=t("p",null,"可以通过值来判断左右子树， 如果 root 大于 pq， 都在左子树， root 小于 pq， 都在右子树，否则就直接是 root",-1),js=t("h2",{id:"图",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#图","aria-hidden":"true"},"#"),n(" 图")],-1);function As(Is,qs){const m=u("router-link"),l=u("mi"),e=u("mo"),o=u("mrow"),i=u("annotation"),c=u("semantics"),r=u("math"),d=u("mn"),_=u("ExternalLinkIcon"),h=u("msub");return f(),k("div",null,[M,t("nav",N,[t("ul",null,[t("li",null,[s(m,{to:"#二叉树-二叉搜索树"},{default:a(()=>[n("二叉树/二叉搜索树")]),_:1}),t("ul",null,[t("li",null,[s(m,{to:"#堆-完全二叉树"},{default:a(()=>[n("堆/完全二叉树")]),_:1})]),t("li",null,[s(m,{to:"#二叉搜索树"},{default:a(()=>[n("二叉搜索树")]),_:1})]),t("li",null,[s(m,{to:"#二叉树遍历"},{default:a(()=>[n("二叉树遍历")]),_:1})]),t("li",null,[s(m,{to:"#题目"},{default:a(()=>[n("题目")]),_:1})])])]),t("li",null,[s(m,{to:"#图"},{default:a(()=>[n("图")]),_:1})])])]),O,t("p",null,[n("元素排列有序，查找块，每次查找一半"),t("span",L,[t("span",E,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("O")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("l")]),_:1}),s(l,null,{default:a(()=>[n("o")]),_:1}),s(l,null,{default:a(()=>[n("g")]),_:1}),s(l,null,{default:a(()=>[n("N")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n(")")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("O(logN)")]),_:1})]),_:1})]),_:1})]),z])]),B,t("p",null,[n("若节点为 "),t("span",V,[t("span",j,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("i")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("i")]),_:1})]),_:1})]),_:1})]),A]),n(", 左子节点为"),t("span",I,[t("span",q,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(d,null,{default:a(()=>[n("2")]),_:1}),s(l,null,{default:a(()=>[n("i")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(d,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("2i+1")]),_:1})]),_:1})]),_:1})]),C]),n(", 右子节点为"),t("span",T,[t("span",D,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(d,null,{default:a(()=>[n("2")]),_:1}),s(l,null,{default:a(()=>[n("i")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(d,null,{default:a(()=>[n("2")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("2i+2")]),_:1})]),_:1})]),_:1})]),F]),n("，父节点为"),t("span",S,[t("span",G,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(e,{stretchy:"false"},{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("i")]),_:1}),s(e,null,{default:a(()=>[n("−")]),_:1}),s(d,null,{default:a(()=>[n("1")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n(")")]),_:1}),s(e,null,{default:a(()=>[n(">")]),_:1}),s(e,null,{default:a(()=>[n(">")]),_:1}),s(d,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("(i - 1) >> 1")]),_:1})]),_:1})]),_:1})]),U])]),t("h4",H,[J,n(" 堆的操作 "),t("span",K,[t("span",P,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("O")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("l")]),_:1}),s(l,null,{default:a(()=>[n("o")]),_:1}),s(l,null,{default:a(()=>[n("g")]),_:1}),s(l,null,{default:a(()=>[n("N")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n(")")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("O(logN)")]),_:1})]),_:1})]),_:1})]),Q])]),R,t("ul",null,[t("li",null,[n("自顶向下建堆，插入堆，上滤， 形成大顶堆 "),t("span",W,[t("span",X,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("O")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("N")]),_:1}),s(l,null,{default:a(()=>[n("l")]),_:1}),s(l,null,{default:a(()=>[n("o")]),_:1}),s(l,null,{default:a(()=>[n("g")]),_:1}),s(l,null,{default:a(()=>[n("N")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n(")")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("O(NlogN)")]),_:1})]),_:1})]),_:1})]),Y])])]),Z,t("ul",null,[t("li",null,[n("自下而上建堆，对每个父节点下滤，直到跟节点操作完毕，形成大顶堆 "),t("span",$,[t("span",ss,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("O")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("N")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n(")")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("O(N)")]),_:1})]),_:1})]),_:1})]),as])])]),ns,t("ul",null,[t("li",null,[t("a",ts,[n("优先队列"),s(_)]),n(", 正常插入队列，按优先级弹出")])]),ls,t("ul",null,[t("li",null,[t("a",es,[n("验证二叉搜索树"),s(_)])])]),t("p",null,[ps,n("： 中序遍历 in-order, 左 + 中 + 右，得到 Array，需要时是升序的，同排序后结果比较。 每个节点只遍历一次，"),t("span",os,[t("span",is,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("O")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("N")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n(")")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("O(N)")]),_:1})]),_:1})]),_:1})]),cs]),n("， 比较占空间，每次递归数组需要存储")]),rs,t("p",null,[us,n("： 递归， 每次递归得到左子树最大值"),t("span",ms,[t("span",ds,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("m")]),_:1}),s(l,null,{default:a(()=>[n("a")]),_:1}),s(h,null,{default:a(()=>[s(l,null,{default:a(()=>[n("x")]),_:1}),s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("l")]),_:1}),s(l,null,{default:a(()=>[n("e")]),_:1}),s(l,null,{default:a(()=>[n("f")]),_:1}),s(l,null,{default:a(()=>[n("t")]),_:1})]),_:1})]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("max_{left}")]),_:1})]),_:1})]),_:1})]),hs]),n("， 右子树最小值"),t("span",_s,[t("span",gs,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("m")]),_:1}),s(l,null,{default:a(()=>[n("i")]),_:1}),s(h,null,{default:a(()=>[s(l,null,{default:a(()=>[n("n")]),_:1}),s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("r")]),_:1}),s(l,null,{default:a(()=>[n("i")]),_:1}),s(l,null,{default:a(()=>[n("g")]),_:1}),s(l,null,{default:a(()=>[n("h")]),_:1}),s(l,null,{default:a(()=>[n("t")]),_:1})]),_:1})]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("min_{right}")]),_:1})]),_:1})]),_:1})]),fs]),n(", 要求"),t("span",ks,[t("span",ys,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("m")]),_:1}),s(l,null,{default:a(()=>[n("a")]),_:1}),s(h,null,{default:a(()=>[s(l,null,{default:a(()=>[n("x")]),_:1}),s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("l")]),_:1}),s(l,null,{default:a(()=>[n("e")]),_:1}),s(l,null,{default:a(()=>[n("f")]),_:1}),s(l,null,{default:a(()=>[n("t")]),_:1})]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("<")]),_:1}),s(l,null,{default:a(()=>[n("r")]),_:1}),s(l,null,{default:a(()=>[n("o")]),_:1}),s(l,null,{default:a(()=>[n("o")]),_:1}),s(l,null,{default:a(()=>[n("t")]),_:1}),s(e,null,{default:a(()=>[n("<")]),_:1}),s(l,null,{default:a(()=>[n("m")]),_:1}),s(l,null,{default:a(()=>[n("i")]),_:1}),s(h,null,{default:a(()=>[s(l,null,{default:a(()=>[n("n")]),_:1}),s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("r")]),_:1}),s(l,null,{default:a(()=>[n("i")]),_:1}),s(l,null,{default:a(()=>[n("g")]),_:1}),s(l,null,{default:a(()=>[n("h")]),_:1}),s(l,null,{default:a(()=>[n("t")]),_:1})]),_:1})]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("max_{left} < root < min_{right}")]),_:1})]),_:1})]),_:1})]),vs]),n(". 每个节点只遍历一次，"),t("span",xs,[t("span",bs,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("O")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("N")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n(")")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("O(N)")]),_:1})]),_:1})]),_:1})]),ws])]),Ms,t("ul",null,[t("li",null,[t("a",Ns,[n("最近公共祖先"),s(_)])])]),Os,t("p",null,[n("当前节点没有返回 null， 当前节点等于 p 或 q 返回当前节点。 左节点为空返回右节点， 右节点为空返回左节点，都不为空返回当前节点 "),t("span",Ls,[t("span",Es,[s(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(c,null,{default:a(()=>[s(o,null,{default:a(()=>[s(l,null,{default:a(()=>[n("O")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("N")]),_:1}),s(e,{stretchy:"false"},{default:a(()=>[n(")")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:a(()=>[n("O(N)")]),_:1})]),_:1})]),_:1})]),zs])]),Bs,Vs,js])}const Ts=g(w,[["render",As],["__file","树-图.html.vue"]]);export{Ts as default};

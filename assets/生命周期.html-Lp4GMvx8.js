import{_ as n,o as a,c as s,e as t}from"./app-7D7ZZLlA.js";const e="/Notes/images/react_lifecycle.png",p="/Notes/images/react16_lifecycle.png",o={},c=t(`<h1 id="react-生命周期" tabindex="-1"><a class="header-anchor" href="#react-生命周期" aria-hidden="true">#</a> react 生命周期</h1><h2 id="请求瀑布问题" tabindex="-1"><a class="header-anchor" href="#请求瀑布问题" aria-hidden="true">#</a> 请求瀑布问题</h2><p>App 组件渲染后才开始请求数据，时机之后，导致 child 依赖 data 也滞后。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">update</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Child data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决-将请求数据的逻辑收敛到路由方案中" tabindex="-1"><a class="header-anchor" href="#解决-将请求数据的逻辑收敛到路由方案中" aria-hidden="true">#</a> 解决：将请求数据的逻辑收敛到路由方案中</h3><ul><li>数据请求方案（解决数据流向问题）</li><li>路由方案（解决数据请求时机问题）</li><li>打包方案（解决懒加载的实现问题）</li></ul><h2 id="类组件声明周期" tabindex="-1"><a class="header-anchor" href="#类组件声明周期" aria-hidden="true">#</a> 类组件声明周期</h2><h3 id="初始化阶段" tabindex="-1"><a class="header-anchor" href="#初始化阶段" aria-hidden="true">#</a> 初始化阶段</h3><h4 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h4><p>配置 state 等属性，截取路由参数，防抖、截流方法</p><h4 id="static-getderivedstatefromprops-静态函数" tabindex="-1"><a class="header-anchor" href="#static-getderivedstatefromprops-静态函数" aria-hidden="true">#</a> static getDerivedStateFromProps 静态函数</h4><p>传入 props 和 state， 返回值将和之前的 state 进行合并，作为新的 state， 用于 props 更新 state。</p><p><code>static getDerivedStateFromProps(props, state) { return {...state} }</code></p><p><code>getDerivedStateFromProps</code> 用 static 修饰，不允许使用 this。不允许比较<code>this.props</code>, 而是<code>nextProps</code>与<code>prevState</code>中的值</p><h4 id="unsafe-componentwillmount" tabindex="-1"><a class="header-anchor" href="#unsafe-componentwillmount" aria-hidden="true">#</a> UNSAFE_componentWillMount</h4><p>在异步渲染下容易重复调用, 如果有 getDerivedStateFromProps 或 getSnapshotBeforeUpdate 就不执行。</p><h4 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h4><p>render 方法不能有副作用和 setState。</p><h4 id="componentdidmount" tabindex="-1"><a class="header-anchor" href="#componentdidmount" aria-hidden="true">#</a> componentDidMount</h4><h3 id="更新阶段" tabindex="-1"><a class="header-anchor" href="#更新阶段" aria-hidden="true">#</a> 更新阶段</h3><h4 id="unsafe-componentwillreceiveprops" tabindex="-1"><a class="header-anchor" href="#unsafe-componentwillreceiveprops" aria-hidden="true">#</a> UNSAFE_componentWillReceiveProps</h4><p>根据传入的 props 的改变来决定 state 是否改变。如果有 getDerivedStateFromProps 则不会执行。</p><h4 id="getderivedstatefromprops" tabindex="-1"><a class="header-anchor" href="#getderivedstatefromprops" aria-hidden="true">#</a> getDerivedStateFromProps</h4><h4 id="shouldcomponentupdate" tabindex="-1"><a class="header-anchor" href="#shouldcomponentupdate" aria-hidden="true">#</a> shouldComponentUpdate</h4><p>返回一个 bool，来决定组件要不要更新，可做性能优化。</p><h4 id="unsafe-componentwillupdate" tabindex="-1"><a class="header-anchor" href="#unsafe-componentwillupdate" aria-hidden="true">#</a> UNSAFE_componentWillUpdate</h4><p>可以获取组件重新渲染之前的状态，渲染是指更新 vdom，而不是更新 dom。</p><p>异步渲染模式下，dom 元素状态会不一致，对 dom 操作不安全</p><h4 id="render-1" tabindex="-1"><a class="header-anchor" href="#render-1" aria-hidden="true">#</a> render</h4><p>执行 jsx， createElement，创建 vnode</p><h4 id="getsnapshotbeforeupdate" tabindex="-1"><a class="header-anchor" href="#getsnapshotbeforeupdate" aria-hidden="true">#</a> getSnapshotBeforeUpdate</h4><p>更新 dom 之前调用，比如记录更新前的 scrolltop，返回值传递给 <code>componentDidUpdate</code></p><h4 id="componentdidupdate" tabindex="-1"><a class="header-anchor" href="#componentdidupdate" aria-hidden="true">#</a> componentDidUpdate</h4><p>不能调用 setState</p><h3 id="销毁阶段" tabindex="-1"><a class="header-anchor" href="#销毁阶段" aria-hidden="true">#</a> 销毁阶段</h3><h4 id="componentwillunmount" tabindex="-1"><a class="header-anchor" href="#componentwillunmount" aria-hidden="true">#</a> componentWillUnmount</h4><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><h4 id="componentdidcatch" tabindex="-1"><a class="header-anchor" href="#componentdidcatch" aria-hidden="true">#</a> componentDidCatch</h4><p>捕获错误，配合 <code>static getDerivedStateFromError</code>， 在渲染子组件的过程中，页面更新之前</p><h4 id="react-16-之前的生命周期" tabindex="-1"><a class="header-anchor" href="#react-16-之前的生命周期" aria-hidden="true">#</a> react 16 之前的生命周期</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>有副作用时或与外部同步，需要同时实现<code>componentDidMount, componentDidUpdate, componentWillUnmount</code>.</p></div><p><img src="`+e+'" alt="react15函数组件生命周期"></p><h4 id="react-16-之后的生命周期" tabindex="-1"><a class="header-anchor" href="#react-16-之后的生命周期" aria-hidden="true">#</a> react 16 之后的生命周期</h4><p>react 16 去除<code>UNSAFE_componentWillMount, UNSAFE_componentWillReceiveProps, UNSAFE_componentWillUpdate</code>。不安全的原因，render 阶段改为异步的渲染，可以被暂停重启，会导致这几个生命周期重复调用。</p><p><img src="'+p+`" alt="react16生命周期"></p><h2 id="函数组件-声明周期" tabindex="-1"><a class="header-anchor" href="#函数组件-声明周期" aria-hidden="true">#</a> 函数组件“声明周期”</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;componentWillReceiveProps&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;componentDidMount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;componentWillUnmount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 没有deps 什么时候都更新</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;componentDidUpdate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;componentWillUpdate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>useEffect 实际上用来处理副作用。</p>`,48),i=[c];function r(u,l){return a(),s("div",null,i)}const h=n(o,[["render",r],["__file","生命周期.html.vue"]]);export{h as default};

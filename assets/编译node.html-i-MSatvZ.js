import{_ as e,o as a,c as o,e as r}from"./app-7D7ZZLlA.js";const c={},i=r('<h1 id="编译node" tabindex="-1"><a class="header-anchor" href="#编译node" aria-hidden="true">#</a> 编译node</h1><ul><li>./configure</li><li>make</li><li>make install</li></ul><h2 id="configure-命令" tabindex="-1"><a class="header-anchor" href="#configure-命令" aria-hidden="true">#</a> configure 命令</h2><p>configure 命令一般用来生成 Makefile，为下一步的编译做准备，你可以通过在 configure 后加上参数来对安装进行控制，比如代码<code>./configure –prefix=/usr</code> 意思是将该软件安装在 <code>/usr</code> 下面，执行文件就会安装在 <code>/usr/bin</code>（而不是默认的 <code>/usr/local/bin</code>)，资源文件就会安装在 <code>/usr/share</code>（而不是默认的<code>/usr/local/share</code>）。</p><p>同时一些软件的配置文件你可以通过指定 <code>–sys-config=</code> 参数进行设定。有一些软件还可以加上<code>–with、–enable、–without、–disable</code> 等等参数对编译加以控制，你可以通过 <code>./configure –help</code> 查看详细的说明帮助。</p><h2 id="make" tabindex="-1"><a class="header-anchor" href="#make" aria-hidden="true">#</a> make</h2><p>make 表示编译，大多数的源代码包都经过这一步进行编译。如果 在 make 过程中出现 error ，你就要记下错误代码（注意不仅仅是最后一行），然后你可以向开发者提交 bugreport，或者你的系统少了一些依赖库等，这些需要自己仔细研究错误代码。</p><p>常见错误</p><p>make *** 没有指明目标并且找不到 makefile，停止。</p><p>问题很明显，没有 Makefile，原来是要先 ./configure 一下，再 make。</p><h2 id="make-install" tabindex="-1"><a class="header-anchor" href="#make-install" aria-hidden="true">#</a> make install</h2><p>这条命令来进行安装，这一步一般需要你有 root 权限（因为要向系统写入文件）。</p>',12),d=[i];function n(l,s){return a(),o("div",null,d)}const h=e(c,[["render",n],["__file","编译node.html.vue"]]);export{h as default};

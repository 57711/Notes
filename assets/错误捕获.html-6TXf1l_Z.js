import{_ as t,r as e,o as p,c as o,a as n,d as s,b as c,e as r}from"./app-7D7ZZLlA.js";const i={},l=n("h1",{id:"全局错误捕获",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#全局错误捕获","aria-hidden":"true"},"#"),s(" 全局错误捕获")],-1),u=n("h2",{id:"前端",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前端","aria-hidden":"true"},"#"),s(" 前端")],-1),d=n("li",null,"可疑区域增加  try...catch",-1),k=n("li",null,"全局监控 JS 异常： window.onerror",-1),v=n("li",null,[s("全局监控静态资源异常： window.addEventListener（‘error’， "),n("strong",null,"true"),s("）")],-1),m=n("li",null,"全局捕获没有  catch  的  promise  异常：window.addEventListener（‘unhandledrejection’）",-1),h=n("li",null,"iframe 异常：window.onerror",-1),b={href:"/react/hooks.html#suspence-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,"监控网页崩溃：window  对象的  load  和  beforeunload 配合 localstorage",-1),y=n("li",null,"Script Error 跨域  crossOrigin  解决",-1),f=r(`<h2 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h2><ol><li><p>window.onerror = function (message, source, lineno, colno, error){} 不能显示其他域错误具体信息 需要允许跨域</p><ul><li><p><code>Access-Control-Allow-Origin: *</code></p></li><li><p><code>&lt;script crossorigin src=&quot;&quot;&gt;&lt;/script&gt;</code> 捕获不到语法 及 资源加载错误（接口/静态资源）</p></li></ul></li><li><p>给所有的函数添加 try catch， 利用 ast （uglifyJs）</p><p>只能捕获到同步的运行时错误，对于语法和异步错误无能为力</p></li><li><p>window.addEventListener(&#39;error&#39;, (error) =&gt; {}， <strong>true</strong>) 事件捕获</p><p>加载资源失败的元素会触发一个 Event 接口的 error 事件，并执行该元素上的 onerror 处理函数。这些 error 事件不会向上冒泡到 window， 不过（至少在  Chrome  中）能被单一的 window.addEventListener  捕获</p><p>由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断  HTTP  的状态是  404  还是其他比如  500  等等，所以还需要配合服务端日志才进行排查分析才可以。</p></li><li><p>window.addEventListener(&#39;unhandledrejection&#39;)</p><p>全局捕获 Promise 的异常， 可以不单独写 catch</p></li><li><p>window.addEventListener(&#39;rejectionhandled&#39;)</p><p>没有被捕获的异常之后调用了 catch 触发。配合 unhandledrejection 将没有处理异常的 promise 放到队列中，在之后的时间遍历队列处理添加 catch 处理，rejectionhandled 中可以监听处理过了的 promise，并从队列中剔除。</p></li><li><p>崩溃或卡顿， 不能上报</p><p>利用  window  对象的  load  和  beforeunload  事件实现了网页崩溃的监控。</p><p>正常退出设置 flag 为正常退出状态， 崩溃不会 beforeunload， 检查 flag</p><p>利用 service worker</p></li><li><p>新的 ReportingObserver API</p><p><code>const reportingObserver=new ReportingObserver(callback, options?)</code></p></li></ol><h3 id="crossorigin" tabindex="-1"><a class="header-anchor" href="#crossorigin" aria-hidden="true">#</a> crossOrigin</h3><p><code>crossOrigin=&quot;anonymous&quot;</code> 不携带 cookie，<code>crossOrigin=&quot;use-credentials&quot;</code>, 会携带 cookie 和客户端证书等票据</p><h2 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h2><p>vue.config.errorHandler = () =&gt; {} 全局</p><h2 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h2><p>ErrorBoundary 组建，配合 componentDidCatch 声明周期</p><p>利用 <code>&lt;suspence /&gt;</code> 包裹</p><h2 id="nodejs" tabindex="-1"><a class="header-anchor" href="#nodejs" aria-hidden="true">#</a> Nodejs</h2><p>错误异常有两种场景的出现，一种是代码运行中 throw new error 没有被捕获，另一种是 Promise 的失败回调函数，没有对应的 reject 回调函数处理，针对这两种情况 Nodejs 都有默认的统一处理方式，就是给整个进程 process 对象监听相应的错误事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//监听未捕获的异常 通用异常 try catch</span>
process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;uncaughtException&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//监听Promise未捕获的异常</span>
process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;unhandledRejection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="express" tabindex="-1"><a class="header-anchor" href="#express" aria-hidden="true">#</a> Express</h2><p><code>app.use((err, req, res, next) =&gt; {})</code></p><h2 id="修饰器添加-try-catch-捕获异步" tabindex="-1"><a class="header-anchor" href="#修饰器添加-try-catch-捕获异步" aria-hidden="true">#</a> 修饰器添加 try catch 捕获异步</h2><p>class 修饰器和方法修饰器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 类修饰器</span>
<span class="token keyword">const</span> <span class="token function-variable function">asyncClass</span> <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token parameter">errorHandler<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token operator">?</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 遍历每一个属性，重写添加try catch</span>
      <span class="token keyword">const</span> func <span class="token operator">=</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      target<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">await</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          errorHandler <span class="token operator">&amp;&amp;</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 方法修饰器</span>
<span class="token keyword">const</span> <span class="token function-variable function">asyncMethod</span> <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token parameter">errorHandler<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token operator">?</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">propertyKey</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">descriptor</span><span class="token operator">:</span> PropertyDescriptor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> func <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            errorHandler <span class="token operator">&amp;&amp;</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token operator">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span>sendError<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  @action
  <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function w(_,E){const a=e("ExternalLinkIcon");return p(),o("div",null,[l,u,n("ol",null,[d,k,v,m,h,n("li",null,[s("VUE errorHandler  和  React componentDidCatch "),n("a",b,[s("suspence"),c(a)])]),g,y]),f])}const j=t(i,[["render",w],["__file","错误捕获.html.vue"]]);export{j as default};
